[gd_resource type="ShaderMaterial" load_steps=16 format=2]

[sub_resource type="VisualShaderNodeScalarOp" id=1]
operator = 2

[sub_resource type="VisualShaderNodeVectorCompose" id=2]

[sub_resource type="VisualShaderNodeScalarUniform" id=8]
uniform_name = "contrast"

[sub_resource type="VisualShaderNodeScalarUniform" id=9]
uniform_name = "saturation"

[sub_resource type="VisualShaderNodeExpression" id=18]
size = Vector2( 1138, 389 )
expression = "vec3 d = vec3(pow(b.x, 0.4545f), pow(b.y, 0.4545f), pow(b.z, 0.4545f));
float red = pow(abs(d.x * 2f - 1f), 1f / max(contrast, 0.0001f)) * sign(d.x - .5f) + .5f;
float green = pow(abs(d.y * 2f - 1f), 1f / max(contrast, 0.0001f)) * sign(d.y - .5f) + .5f;
float blue = pow(abs(d.z * 2f - 1f), 1f / max(contrast, 0.0001f)) * sign(d.z - .5f) + .5f;

if (a.x > 1f) a.x = 1f;
if (a.x < 0f) a.x = 0f;

if (a.y > 1f) a.y = 1f;
if (a.y < 0f) a.y = 0f;

if (a.z > 1f) a.z = 1f;
if (a.z < 0f) a.z = 0f;

a = vec3(pow(red, 2.2f), pow(green, 2.2f), pow(blue, 2.2f));"

[sub_resource type="VisualShaderNodeVectorOp" id=19]
default_input_values = [ 0, Vector3( 0, 0, 0 ), 1, Vector3( 0.8, 0.8, 0.8 ) ]
operator = 2

[sub_resource type="VisualShaderNodeVectorCompose" id=20]

[sub_resource type="VisualShaderNodeScalarUniform" id=21]
uniform_name = "grayness"

[sub_resource type="VisualShaderNodeInput" id=10]
input_name = "screen_uv"

[sub_resource type="VisualShaderNodeInput" id=11]
input_name = "screen_texture"

[sub_resource type="VisualShaderNodeTexture" id=12]
source = 5

[sub_resource type="VisualShaderNodeVectorFunc" id=13]
output_port_for_preview = 0
function = 4

[sub_resource type="VisualShaderNodeVectorFunc" id=14]
output_port_for_preview = 0
function = 5

[sub_resource type="VisualShaderNodeVectorDecompose" id=15]
output_port_for_preview = 2

[sub_resource type="VisualShader" id=17]
code = "shader_type canvas_item;
uniform float contrast;
uniform float saturation;
uniform float grayness;



void vertex() {
// Output:0

}

void fragment() {
// ScalarUniform:18
	float n_out18p0 = contrast;

// Input:3
	vec3 n_out3p0 = vec3(SCREEN_UV, 0.0);

// Input:4

// Texture:5
	vec3 n_out5p0;
	float n_out5p1;
	{
		vec4 SCREEN_TEXTURE_tex_read = texture(SCREEN_TEXTURE, n_out3p0.xy);
		n_out5p0 = SCREEN_TEXTURE_tex_read.rgb;
		n_out5p1 = SCREEN_TEXTURE_tex_read.a;
	}

// VectorFunc:6
	vec3 n_out6p0;
	{
		vec3 c = n_out5p0;
		vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);
		vec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));
		vec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));
		float d = q.x - min(q.w, q.y);
		float e = 1.0e-10;
		n_out6p0 = vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);
	}

// VectorDecompose:8
	float n_out8p0 = n_out6p0.x;
	float n_out8p1 = n_out6p0.y;
	float n_out8p2 = n_out6p0.z;

// ScalarUniform:19
	float n_out19p0 = saturation;

// ScalarOp:10
	float n_out10p0 = n_out8p1 * n_out19p0;

// VectorCompose:11
	vec3 n_out11p0 = vec3(n_out8p0, n_out10p0, n_out8p2);

// VectorFunc:7
	vec3 n_out7p0;
	{
		vec3 c = n_out11p0;
		vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);
		vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);
		n_out7p0 = c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);
	}

// Expression:20
	vec3 n_out20p0;
	n_out20p0 = vec3(0.0, 0.0, 0.0);
	{
		vec3 d = vec3(pow(n_out7p0.x, 0.4545f), pow(n_out7p0.y, 0.4545f), pow(n_out7p0.z, 0.4545f));
		float red = pow(abs(d.x * 2f - 1f), 1f / max(n_out18p0, 0.0001f)) * sign(d.x - .5f) + .5f;
		float green = pow(abs(d.y * 2f - 1f), 1f / max(n_out18p0, 0.0001f)) * sign(d.y - .5f) + .5f;
		float blue = pow(abs(d.z * 2f - 1f), 1f / max(n_out18p0, 0.0001f)) * sign(d.z - .5f) + .5f;
		
		if (n_out20p0.x > 1f) n_out20p0.x = 1f;
		if (n_out20p0.x < 0f) n_out20p0.x = 0f;
		
		if (n_out20p0.y > 1f) n_out20p0.y = 1f;
		if (n_out20p0.y < 0f) n_out20p0.y = 0f;
		
		if (n_out20p0.z > 1f) n_out20p0.z = 1f;
		if (n_out20p0.z < 0f) n_out20p0.z = 0f;
		
		n_out20p0 = vec3(pow(red, 2.2f), pow(green, 2.2f), pow(blue, 2.2f));
	}

// ScalarUniform:23
	float n_out23p0 = grayness;

// VectorCompose:22
	vec3 n_out22p0 = vec3(n_out23p0, n_out23p0, n_out23p0);

// VectorOp:21
	vec3 n_out21p0 = n_out20p0 * n_out22p0;

// Output:0
	COLOR.rgb = n_out21p0;
	COLOR.a = n_out5p1;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( 2590.69, 194.25 )
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2( 4280, 0 )
nodes/fragment/3/node = SubResource( 10 )
nodes/fragment/3/position = Vector2( 980, 120 )
nodes/fragment/4/node = SubResource( 11 )
nodes/fragment/4/position = Vector2( 980, 260 )
nodes/fragment/5/node = SubResource( 12 )
nodes/fragment/5/position = Vector2( 1300, -40 )
nodes/fragment/6/node = SubResource( 13 )
nodes/fragment/6/position = Vector2( 1480, 80 )
nodes/fragment/7/node = SubResource( 14 )
nodes/fragment/7/position = Vector2( 2400, 80 )
nodes/fragment/8/node = SubResource( 15 )
nodes/fragment/8/position = Vector2( 1680, 80 )
nodes/fragment/10/node = SubResource( 1 )
nodes/fragment/10/position = Vector2( 1920, 180 )
nodes/fragment/11/node = SubResource( 2 )
nodes/fragment/11/position = Vector2( 2140, 80 )
nodes/fragment/18/node = SubResource( 8 )
nodes/fragment/18/position = Vector2( 2400, 380 )
nodes/fragment/19/node = SubResource( 9 )
nodes/fragment/19/position = Vector2( 1700, 300 )
nodes/fragment/20/node = SubResource( 18 )
nodes/fragment/20/position = Vector2( 2660, 340 )
nodes/fragment/20/size = Vector2( 1138, 389 )
nodes/fragment/20/input_ports = "0,0,contrast;1,1,b;"
nodes/fragment/20/output_ports = "0,1,a;"
nodes/fragment/20/expression = "vec3 d = vec3(pow(b.x, 0.4545f), pow(b.y, 0.4545f), pow(b.z, 0.4545f));
float red = pow(abs(d.x * 2f - 1f), 1f / max(contrast, 0.0001f)) * sign(d.x - .5f) + .5f;
float green = pow(abs(d.y * 2f - 1f), 1f / max(contrast, 0.0001f)) * sign(d.y - .5f) + .5f;
float blue = pow(abs(d.z * 2f - 1f), 1f / max(contrast, 0.0001f)) * sign(d.z - .5f) + .5f;

if (a.x > 1f) a.x = 1f;
if (a.x < 0f) a.x = 0f;

if (a.y > 1f) a.y = 1f;
if (a.y < 0f) a.y = 0f;

if (a.z > 1f) a.z = 1f;
if (a.z < 0f) a.z = 0f;

a = vec3(pow(red, 2.2f), pow(green, 2.2f), pow(blue, 2.2f));"
nodes/fragment/21/node = SubResource( 19 )
nodes/fragment/21/position = Vector2( 3840, 340 )
nodes/fragment/22/node = SubResource( 20 )
nodes/fragment/22/position = Vector2( 3620, 160 )
nodes/fragment/23/node = SubResource( 21 )
nodes/fragment/23/position = Vector2( 3380, 160 )
nodes/fragment/connections = PoolIntArray( 3, 0, 5, 0, 4, 0, 5, 2, 5, 1, 0, 1, 5, 0, 6, 0, 6, 0, 8, 0, 8, 1, 10, 0, 10, 0, 11, 1, 8, 0, 11, 0, 8, 2, 11, 2, 11, 0, 7, 0, 19, 0, 10, 1, 18, 0, 20, 0, 7, 0, 20, 1, 20, 0, 21, 0, 21, 0, 0, 0, 22, 0, 21, 1, 23, 0, 22, 2, 23, 0, 22, 1, 23, 0, 22, 0 )

[resource]
shader = SubResource( 17 )
shader_param/contrast = 1.0
shader_param/saturation = 1.0
shader_param/grayness = 0.5
